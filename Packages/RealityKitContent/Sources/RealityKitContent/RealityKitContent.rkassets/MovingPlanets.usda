#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "Saturn"]

def Xform "Root"
{
    reorder nameChildren = ["Sun", "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "SkySphere", "SpaceMaterial", "MercuryOrbit", "VenusOrbit", "EarthOrbit", "MarsOrbit", "JupiterOrbit", "SaturnOrbit", "UranusOrbit", "NeptuneOrbit"]
    def "Mercury" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.12217312, 0, 0.00052359886)
        }
        references = @Mercury.usdz@
    )
    {
        reorder nameChildren = ["geom", "Collider", "InputTarget", "RealityKitContent_GestureComponent", "ImageBasedLightReceiver", "RCP_BehaviorsContainer", "OnAddedToScene"]
        quatf xformOp:orient = (0.99813473, 0.06104857, 0.000015982481, 0.0002613111)
        float3 xformOp:scale = (2, 2, 2)
        float3 xformOp:translate = (0, 0.9, -3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        over "geom"
        {
            over "realistic"
            {
                over "materials"
                {
                    over "usdpreviewsurface3sg1"
                    {
                        string inputs:mercury_realistic_ao:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (465.25, 639.5)
                                }
                            }
                        )
                        string inputs:mercury_realistic_bc:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (752.25, 639.5)
                                }
                            }
                        )
                        string inputs:mercury_realistic_n:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (1039.25, 639.5)
                                }
                            }
                        )
                        token outputs:realitykit:vertex
                        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1416.25, 261)

                        over "mercury_realistic_bc_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (623, 451.5)
                        }

                        over "mercury_realistic_01_mat_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (1163, 261)
                            int ui:nodegraph:node:stackingOrder = 1
                        }

                        over "mercury_realistic_n_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (350, 273)
                        }

                        over "mercury_realistic_n_mtlx_offset"
                        {
                            float2 ui:nodegraph:node:pos = (893, 279)
                        }

                        over "mercury_realistic_ao_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (893, 100.5)
                        }

                        over "mercury_realistic_n_mtlx_scale"
                        {
                            float2 ui:nodegraph:node:pos = (623, 273)
                        }

                        over "Lookup_st"
                        {
                            float2 ui:nodegraph:node:pos = (91, 172.5)
                        }
                    }
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.19999999, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (2.2351742e-8, 0, 2.9802322e-8)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Mercury/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Mercury/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Mercury/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Mercury>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/MercuryOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Mercury/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Earth" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 0.4091052)
        }
        references = @Earth.usdz@
    )
    {
        reorder nameChildren = ["geom", "Collider", "InputTarget", "RealityKitContent_GestureComponent", "ImageBasedLightReceiver", "RCP_BehaviorsContainer", "OnAddedToScene"]
        quatf xformOp:orient = (0.97915196, 0, 0, 0.20312911)
        float3 xformOp:scale = (4, 4, 4)
        float3 xformOp:translate = (0, 0.9, -9)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.20499998, 0.205, 0.20500001)
                float radius = 0.10250001
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.00004060194, 0, 0.00011316314)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Earth/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Earth/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Earth/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Earth>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/EarthOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Earth/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Jupiter" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.022863815, 0, 0.054628797)
        }
        references = @Jupiter.usdz@
    )
    {
        quatf xformOp:orient = (0.99956167, 0.011427394, 0.00031221006, 0.027309218)
        float3 xformOp:scale = (8, 8, 8)
        float3 xformOp:translate = (0, 0.9, -15)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.19999999, 0.2, 0.20000002)
                float radius = 0.2
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.0005309619, 0.000080280006, -3.7252903e-9)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Jupiter/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Jupiter/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Jupiter/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Jupiter>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/JupiterOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Jupiter/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Saturn" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.043458663, 9.313226e-10, 0.4665265)
        }
        references = @Saturn.usdz@
    )
    {
        quatf xformOp:orient = (0.9726876, 0.02113918, 0.005022419, 0.23109904)
        float3 xformOp:scale = (7, 7, 7)
        float3 xformOp:translate = (0, 0.9, -18)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.46763724, 0.20021316, 0.46763742)
                float radius = 0.2
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (-3.7252903e-8, 0, 3.7252903e-8)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Saturn/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Saturn/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Saturn/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Saturn>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/SaturnOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Saturn/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Uranus" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.01343894, 0, 1.7064085)
        }
        references = @Uranus.usdz@
    )
    {
        quatf xformOp:orient = (0.65755767, 0.004418506, 0.0050623524, 0.7533743)
        float3 xformOp:scale = (5, 5, 5)
        float3 xformOp:translate = (0, 0.9, -21)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.19999999, 0.2, 0.20000002)
                float radius = 0.25
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (6.3329935e-8, 0, 7.0780516e-8)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Uranus/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Uranus/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Uranus/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Uranus>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/UranusOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Uranus/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Neptune" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.030892335, 0, 0.49427724)
        }
        references = @Neptune.usdz@
    )
    {
        quatf xformOp:orient = (0.9695007, 0.014976261, 0.003778454, 0.24460135)
        float3 xformOp:scale = (4.8, 4.8, 4.8)
        float3 xformOp:translate = (0, 0.9, -24)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.25
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (2.9802322e-8, 0, 2.9802322e-8)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Neptune/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Neptune/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Neptune/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Neptune>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/NeptuneOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Neptune/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "MercuryOrbit"
    {
        reorder nameChildren = ["Track", "Track2", "Track3", "Track4", "Track5"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                float3 axis = (0, 1, 0)
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "9ED9F4F2-E410-483A-9FBF-7D433253DA7A"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 10
                double startTime = 0
                rel target = </Root/Mercury>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "D23B6D54-A05A-4AD0-83FA-73B897B14DE5"
                float revolutions = 16
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Mercury>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }

        def RealityKitTrack "Track5"
        {
        }
    }

    def RealityKitTimeline "VenusOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "E814BE21-04E2-4076-AF62-F52DE3052322"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 9
                double startTime = 0
                rel target = </Root/Venus>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "33577A18-D2C2-49B6-8EE3-F30BF7C85348"
                float revolutions = 13
                double startTime = 0
                rel target = </Root/Venus>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "EarthOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "9A9851BC-8FBF-4926-9F19-5A2CCC4547E4"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 8
                double startTime = 0
                rel target = </Root/Earth>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "721C7547-8B61-427E-A9F2-90AF0C6DA039"
                float revolutions = 17
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Earth>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "MarsOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "CCC08E93-6F81-4093-9604-9CD0D8E23610"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 7
                double startTime = 0
                rel target = </Root/Mars>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "0097E71F-931F-4591-B66C-8E3D043C85BD"
                float revolutions = 22
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Mars>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "JupiterOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "0F951911-F0DB-4D10-AAF4-6973B15A9DB0"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 6
                double startTime = 0
                rel target = </Root/Jupiter>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "A7512422-6057-4759-937B-E6BF434CFB9F"
                float revolutions = 37
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Jupiter>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "SaturnOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "1176D71C-56C6-48C7-9413-5CFADB1F6F04"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 5
                double startTime = 0
                rel target = </Root/Saturn>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "3A0F1A74-B505-47F4-BFD7-D0CCEB061F2F"
                float revolutions = 35
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Saturn>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "UranusOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "5D99E264-BDE8-4A7A-B3AB-8331A687CDF1"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 4
                double startTime = 0
                rel target = </Root/Uranus>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "F0B59D66-97F0-4CBC-B6CE-FCD8B933D75E"
                float revolutions = 27
                double startTime = 0
                rel target = </Root/Uranus>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "NeptuneOrbit"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 600
                uniform token info:id = "327ADDD0-D760-4E82-AE6C-E07950256C80"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 0
                rel pivotEntity = </Root/Sun>
                float revolutions = 3
                double startTime = 0
                rel target = </Root/Neptune>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 600
                uniform token info:id = "FF04B67F-F4DF-4DE6-9B30-29C316985078"
                float revolutions = 29
                double startTime = 0
                rel target = </Root/Neptune>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def "Venus" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.059166674, -1.1641532e-10, 3.095516)
        }
        references = @Venus.usdz@
    )
    {
        quatf xformOp:orient = (0.023026226, 0.0006813914, 0.029571172, 0.9992972)
        float3 xformOp:scale = (3, 3, 3)
        float3 xformOp:translate = (0, 0.9, -6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (2.682209e-7, 0, 2.682209e-7)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Venus/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Venus/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Venus/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Venus>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/VenusOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Venus/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Mars" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.032288592, 0, 0.43964845)
        }
        references = @Mars.usdz@
    )
    {
        reorder nameChildren = ["Saturn", "geom"]
        quatf xformOp:orient = (0.9758086, 0.015755111, 0.003520241, 0.21802966)
        float3 xformOp:scale = (3, 3, 3)
        float3 xformOp:translate = (0, 0.9, -12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.19999999, 0.19999999, 0.19999999)
                float radius = 0.14
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (3.3527613e-8, -0.000718683, 2.2351742e-8)
                }
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Mars/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Mars/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Mars/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Mars>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/MarsOrbit>
                rel animationLibraryKeyOverrideKey = </Root/Mars/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def "Sun" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0.12653638, 0)
        }
        references = @Sun.usdz@
    )
    {
        reorder nameChildren = ["geom", "InputTarget", "Collider", "DirectionalLight", "EnvironmentLightingConfiguration", "SpotLight"]
        quatf xformOp:orient = (0.9979992, 0, 0.06322671, 0)
        float3 xformOp:scale = (0.01, 0.010000001, 0.01)
        float3 xformOp:translate = (0, 0.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "PointLight"
        {
            float attenuationFalloffExponent = 0.5
            float attenuationRadius = 250
            uniform token info:id = "RealityKit.PointLight"
            float intensity = 100000
        }
    }

    def "SkySphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            dictionary RE = {
                dictionary mesh = {
                    dictionary v1 = {
                        bool reorderVertexCaching = 0
                    }
                }
            }
        }
        references = @SkySphere.usdz@
    )
    {
        rel material:binding = </Root/SpaceMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
    }

    def Material "SpaceMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/SpaceMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.01
            color3f inputs:diffuseColor.connect = </Root/SpaceMaterial/Image.outputs:out>
            float inputs:ior = 1.5
            float inputs:metallic = 0.2
            float3 inputs:normal = (0, 0, 1)
            float inputs:occlusion = 0.8
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 9
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            asset inputs:file = @SpaceImage-gray.png@
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-138.59766, 67.98828)
            int ui:nodegraph:node:stackingOrder = 19
        }
    }
}

