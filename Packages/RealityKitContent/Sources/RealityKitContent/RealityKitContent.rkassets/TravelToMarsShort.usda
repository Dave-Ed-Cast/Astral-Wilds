#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Mars_1", "SkySphere", "SpaceMaterial", "ParticlesHolder", "TravelToUser", "SkysphereTravel", "RCP_BehaviorsContainer", "AudioHolder"]
    def "Mars_1" (
        active = true
        references = @Mars 1.usdz@
    )
    {
        float3 xformOp:scale = (10, 10, 10)
        float3 xformOp:translate = (0, -0.507, -50)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Mars_1/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Mars_1/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Mars_1/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Mars_1>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/TravelToUser>
                rel animationLibraryKeyOverrideKey = </Root/Mars_1/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            uniform token info:id = "RealityKitContent.GestureComponent"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.19999999, 0.19999999, 0.19999999)
                float radius = 0.099999994
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                    float3 position = (3.3527613e-8, -0.000718683, 2.2351742e-8)
                }
            }
        }
    }

    def "SkySphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @SkySphere.usdz@
    )
    {
        reorder nameChildren = ["SkySphere_mat", "RCP_BehaviorsContainer", "OnAddedToScene"]
        rel material:binding = </Root/SpaceMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, -50)

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/SkySphere/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/SkySphere/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/SkySphere/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/SkySphere>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/SkysphereTravel>
                rel animationLibraryKeyOverrideKey = </Root/SkySphere/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "TravelToUser"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 48
                uniform token info:id = "A0413589-EF75-4476-ADAC-A1CB77896890"
                float3 position = (0, -0.507, -5)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (10, 10, 10)
                double startTime = 7.5
                rel target = </Root/Mars_1>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeOut"
                }
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 210
                uniform token info:id = "2E95B770-0F02-48D9-83AA-426D4DB65011"
                float revolutions = 5
                token spinDirection = "counterclockwise"
                double startTime = 0
                rel target = </Root/Mars_1>

                def RealityKitStruct "timingFunction"
                {
                    token type = "linear"
                }
            }
        }
    }

    def RealityKitTimeline "SkysphereTravel"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 55
                uniform token info:id = "0238D712-E080-4197-A36D-8F3E1182480C"
                float3 position = (0, 0, -10)
                quatf rotation = (1, 0, 0, 0)
                float3 scale = (1, 1, 1)
                double startTime = 7.5
                rel target = </Root/SkySphere>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeInOut"
                }
            }
        }
    }

    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Cube "AudioHolder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["SpaceMusic", "DefaultMaterial"]
        rel material:binding = </Root/AudioHolder/DefaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token cullMode = "unspecified" (
                allowedTokens = ["unspecified", "none", "front", "back"]
            )
            token outputs:mtlx:surface.connect = </Root/AudioHolder/DefaultMaterial/UnlitSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:opacity = 0
                float inputs:opacityThreshold
                float inputs:roughness = 1
                token outputs:surface
            }

            def Shader "UnlitSurface"
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap
                bool inputs:hasPremultipliedAlpha
                float inputs:opacity = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (-249.71484, 114.72266)
                int ui:nodegraph:node:stackingOrder = 4
            }
        }

        def "SpaceMusic" (
            active = true
            references = @SpaceMusic.usda@
        )
        {
            float3 xformOp:scale = (1, 1, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Material "SpaceMaterial"
    {
        token outputs:mtlx:surface.connect = </Root/SpaceMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 2
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 18

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.01
            color3f inputs:diffuseColor.connect = </Root/SpaceMaterial/Image.outputs:out>
            float inputs:ior = 1
            float inputs:metallic = 0.2
            float3 inputs:normal = (0, 0, 1)
            float inputs:occlusion = 1
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 22
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default = (0, 0, 0) (
                colorSpace = "srgb_displayp3"
            )
            asset inputs:file = @SpaceImage-gray.png@
            string inputs:filtertype = "linear"
            string inputs:uaddressmode = "periodic"
            string inputs:vaddressmode = "periodic"
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-138.59766, 67.98828)
            int ui:nodegraph:node:stackingOrder = 23
        }
    }

    def Cube "ParticlesHolder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["RCP_BehaviorsContainer", "OnAddedToScene", "Particles", "DefaultMaterial"]
        rel material:binding = </Root/ParticlesHolder/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 1.55, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Particles" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = @Particles.usda@
        )
        {
            rel material:binding = </Root/ParticlesHolder/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "ParticleEmitter" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/ParticlesHolder/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/ParticlesHolder/DefaultMaterial/UnlitSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/ParticlesHolder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "UnlitSurface"
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                float inputs:opacity = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (-210.4379, 79.572685)
                int ui:nodegraph:node:stackingOrder = 6
            }
        }
    }
}

